apply plugin: 'com.android.application'
// Global Parameters accepted
// TARGET_APP_NAME    - app name
// APK_NUMBER_VERSION - version number of apk
// APK_VERSION_SUFFIX - build number like #99999Z, appended (for dev builds) to Manifest's versionName as X.X.X#99999Z
//                      Z means flavor: M=-master, D=-main-default, B=-Blackberry, Des=-design, MQA=-main-qt-arm, MQDA=-main-qt-default-arm, S=-sherpafy
// APP_EDITION        - date stamp of builds
// APP_FEATURES       - features +play_market +gps_status -parking_plugin -blackberry -free_version -amazon

// 1. To be done Filter fonts
// <unzip src="OsmAndCore_android.aar" dest=".">
//            <patternset>
//                <include name="assets/**/map/fonts/OpenSans/*"/>
//                <include name="assets/**/map/fonts/NotoSans/*"/>
//            </patternset>
//        </unzip>
// Less important

android {
	compileSdkVersion 27

	signingConfigs {
		development {
			storeFile file("../keystores/debug.keystore")
			storePassword "android"
			keyAlias "androiddebugkey"
			keyPassword "android"
		}

		publishing {
			storeFile file("/var/lib/jenkins/osmand_key")
			storePassword System.getenv("OSMAND_APK_PASSWORD")
			keyAlias "osmand"
			keyPassword System.getenv("OSMAND_APK_PASSWORD")
		}
	}

	defaultConfig {
		minSdkVersion System.getenv("MIN_SDK_VERSION") ? System.getenv("MIN_SDK_VERSION").toInteger() : 16
		targetSdkVersion 27
		versionCode 300
		versionCode System.getenv("APK_NUMBER_VERSION") ? System.getenv("APK_NUMBER_VERSION").toInteger() : versionCode
		multiDexEnabled true
		versionName "2.9.0"
		versionName System.getenv("APK_VERSION")? System.getenv("APK_VERSION").toString(): versionName
		versionName System.getenv("APK_VERSION_SUFFIX")? versionName + System.getenv("APK_VERSION_SUFFIX").toString(): versionName
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	lintOptions {
		abortOnError false
		warningsAsErrors false
	}

	// This is from OsmAndCore_android.aar - for some reason it's not inherited
	aaptOptions {
		// Don't compress any embedded resources
		noCompress "qz"
		cruncherEnabled = false
	}

	dexOptions {
		javaMaxHeapSize "4g"
	}

	sourceSets {
		main {
			manifest.srcFile "AndroidManifest.xml"
			jni.srcDirs = []
			jniLibs.srcDirs = ["libs"]
			aidl.srcDirs = ["src"]
			java.srcDirs = ["src"]
			resources.srcDirs = ["src"]
			renderscript.srcDirs = ["src"]
			res.srcDirs = ["res"]
			assets.srcDirs = ["assets"]
		}
		free {
			manifest.srcFile "AndroidManifest-free.xml"
		}
		freedev {
			manifest.srcFile "AndroidManifest-freedev.xml"
		}
	}

    flavorDimensions "version", "abi"
	productFlavors {
		// ABI
		armv7 {
			dimension "abi"
			ndk {
				abiFilter "armeabi-v7a"
			}
		}
		x86 {
			dimension "abi"
			ndk {
				abiFilter "x86"
			}
		}
		fat {
			dimension "abi"
		}

		// Version
		freedev {
			dimension "version"
			applicationId "net.osmand.dev"
			// resConfig "en"
		}
		free {
			dimension "version"
			applicationId "net.osmand"
		}
		freeres {
			dimension "version"
			applicationId "net.osmand"
			resConfig "en"
		}
		full {
			dimension "version"
			applicationId "net.osmand.plus"
		}
        fulldev {
            dimension "version"
            applicationId "net.osmand.plus"
            resConfig "en"
            //resConfigs "xxhdpi", "nodpi"
        }
	}

	buildTypes {
		debug {
			// proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
			// minifyEnabled true
			// proguardFiles 'proguard-project.txt'
			signingConfig signingConfigs.development
		}
		release {
			// proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
			// minifyEnabled true
			//proguardFiles 'proguard-project.txt'
			signingConfig signingConfigs.publishing
		}
	}
	externalNativeBuild {
		ndkBuild {
			path 'jni/Android.mk'
		}
	}
}

static def replaceNoTranslate(line) {
	if (line.contains("\"app_name\"") && System.getenv("TARGET_APP_NAME")) {
		return line.replaceAll(">[^<]*<", ">" + System.getenv("TARGET_APP_NAME") + "<")
	}
	if (line.contains("\"app_name_free\"") && System.getenv("TARGET_APP_NAME")) {
		return line.replaceAll(">[^<]*<", ">" + System.getenv("TARGET_APP_NAME") + "<")
	}
	if (line.contains("\"app_edition\"") && System.getenv("APP_EDITION")) {
		return line.replaceAll(">[^<]*<", ">" + System.getenv("APP_EDITION") + "<")
	}
//	if (line.contains("\"app_version\"") && System.getenv("APK_VERSION")) {
//		return line.replaceAll(">[^<]*<", ">" + System.getenv("APK_VERSION") + "<")
//	}
//	if (line.contains("\"app_version_suffix\"") && System.getenv("APK_VERSION_SUFFIX")) {
//		return line.replaceAll("</", System.getenv("APK_VERSION_SUFFIX") + "</")
//	}
	if (line.contains("\"versionFeatures\"") && System.getenv("APP_FEATURES")) {
		return line.replaceAll(">[^<]*<", ">" + System.getenv("APP_FEATURES") + "<")
	}
	return line
}

task updateNoTranslate(type: Copy) {
	from('.') {
		include 'no_translate.xml'
		filter {
			line -> replaceNoTranslate(line)
		}
	}
	into 'res/values/'
}

task validateTranslate {
	file("res").eachFileRecurse FileType.FILES, {
		if (it.name == "strings.xml" || it.name == "phrases.xml") {
			it.eachLine { line ->
				if (line.contains("\$ s") || line.contains("\$ d") || line.contains("\$ f") ||
						line.contains(" \$s") || line.contains(" \$d") || line.contains(" \$f") ||
						line.contains("1\$ ") || line.contains("2\$ ") || line.contains("3\$ ") ||
						(line.contains("% \$") || line.contains("% 1") ||
								line.contains("% 2") || line.contains("% 3"))) {
					throw new GradleException("Incorrect translation " + it.getAbsolutePath() + " " + line)
				}
			}
		}
	}
}

task collectVoiceAssets(type: Sync) {
	from "../../resources/voice"
	into "assets/voice"
	include "**/*.p"
}

task cleanNoTranslate(type: Delete) {
     delete('res/values/no_translate.xml')
}

task collectFonts(type: Copy) {
	from "../../resources/fonts"
	from "../../resources/rendering_styles/fonts"
//	from "../../resources/rendering_styles/fonts/OpenSans"
	into "assets/fonts"
	include "*.ttf"
}

task collectHelpContentsStyle(type: Copy) {
	from("../../help/website/help/") {
		include "style.css"
	}
	into "assets"
}

task collectHelpContentsAssets(type: Copy) {
	from("../../help/website/help") {
		include "about.html"
		include "changes.html"
		include "faq.html"
		include "technical-articles.html"
		include "map-legend.html"
	}
	from("../../help/website/feature_articles") {
		include "*.html"
	}

	into "assets/feature_articles"
}

task collectRoutingResources(type: Sync) {
	from "../../resources/routing"
	into "src/net/osmand/router"
	include "*.xml"
}

task collectMiscResources(type: Copy) {
	into "src/net/osmand/osm"
	from("../../resources/obf_creation") {
		include "rendering_types.xml"
	}
	from("../../resources/poi") {
		include "poi_types.xml"
	}
}

task collectRenderingStylesResources(type: Sync) {
	from "../../resources/rendering_styles"
	into "src/net/osmand/render"
	include "*.xml"
}

task collectRegionsInfoResources(type: Copy) {
	from "../../resources/countries-info"
	into "src/net/osmand/map"
	include "regions.ocbf"
}

task copyStyleIcons(type: Copy) {
	from "../../resources/rendering_styles/style-icons/"
	into "res/"
	include "**/*.png"
}

task collectExternalResources() {
    doLast{}
}
collectExternalResources.dependsOn collectVoiceAssets,
		collectFonts,
		collectHelpContentsAssets,
		collectHelpContentsStyle,
		collectRoutingResources,
		collectRenderingStylesResources,
		collectRegionsInfoResources,
		collectMiscResources,
		copyStyleIcons,
		updateNoTranslate,
		validateTranslate

// Legacy core
import groovy.io.FileType
import org.apache.tools.ant.taskdefs.condition.Os

task configureOsmAndCoreExternals(type: Exec) {
	description "Configure externals Legacy OsmAndCore"

	if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine "bash", file("../../core-legacy/externals/configure.sh").getAbsolutePath()
	} else {
		commandLine "cmd", "/c", "echo", "Not supported"
	}
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn << [collectExternalResources, configureOsmAndCoreExternals]
}

task appStart(type: Exec) {
	// linux 
	commandLine 'adb', 'shell', 'am', 'start', '-n', 'net.osmand.plus/net.osmand.plus.activities.MapActivity'
	// windows
	// commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', 'net.osmand.plus/net.osmand.plus.activities.MapActivity'      
}

repositories {
	ivy {
		name = "OsmAndBinariesIvy"
		url = "http://builder.osmand.net"
		layout "pattern", {
			artifact "ivy/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
		}
	}
	mavenCentral()
	jcenter()
	maven {
		url "https://jitpack.io"
	}
	// junidecode
	maven {
		url "https://dl.bintray.com/allenai/maven/"
	}
}

def analytics = (System.getenv("APP_FEATURES") && System.getenv("APP_FEATURES").contains("+play_market") && 
	System.getenv("PACKAGE_TO_BUILT").equals("net.osmand") ) || System.getenv("USE_FIREBASE")
dependencies {
	implementation project(path: ':OsmAnd-java', configuration: 'android')
	if (analytics) {
		implementation 'com.google.firebase:firebase-core:9.8.0'
		implementation 'com.google.firebase:firebase-config:9.8.0'
	}
	implementation 'com.android.support:gridlayout-v7:27.1.1'
	implementation 'com.android.support:cardview-v7:27.1.1'
	implementation 'com.android.support:appcompat-v7:27.1.1'
	implementation 'com.android.support:design:27.1.1'
	implementation 'com.android.support:customtabs:27.1.1'
	implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.beanshell:bsh-core:2.0b4"
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
	implementation group: 'com.vividsolutions', name: 'jts-core', version: '1.14.0'
	implementation group: 'junidecode', name: 'junidecode', version: '0.1.1'
	implementation group: 'it.unibo.alice.tuprolog', name: 'tuprolog', version: '3.2.1'
	implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    // Hay que mantenerlo por alguna razón que desconozco.
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '61.1'

	// https://mvnrepository.com/artifact/com.google.openlocationcode/openlocationcode
	implementation group: 'com.google.openlocationcode', name: 'openlocationcode', version: '1.0.2'

    // https://mvnrepository.com/artifact/com.github.ksoichiro/android-observablescrollview
    implementation group: 'com.github.ksoichiro', name: 'android-observablescrollview', version: '1.6.0'

	implementation "net.osmand:OsmAndCore_android:0.1-SNAPSHOT@jar"
	implementation ("com.getkeepsafe.taptargetview:taptargetview:1.6.1"){
		exclude group: 'com.android.support'
	}
	implementation 'com.github.PhilJay:MPAndroidChart:v3.0.1'
	implementation ("com.github.HITGIF:TextFieldBoxes:1.3.5"){
		exclude group: 'com.android.support'
	}
}
if(analytics) {
	println "Apply GMS plugin"
	apply plugin: 'com.google.gms.google-services'
}
